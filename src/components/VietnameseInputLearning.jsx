import React, { useState } from 'react';
import { Card, Button, Input, Typography, Space, Progress, Tag, message, Alert } from 'antd';
import { 
  ArrowLeftOutlined, 
  SoundOutlined, 
  CheckOutlined,
  ReloadOutlined,
  BulbOutlined
} from '@ant-design/icons';

const { Title, Paragraph } = Typography;

const VietnameseInputLearning = ({ vocabulary, onBack }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [userInput, setUserInput] = useState('');
  const [showAnswer, setShowAnswer] = useState(false);
  const [score, setScore] = useState({ correct: 0, incorrect: 0 });
  const [showResult, setShowResult] = useState(false);
  const [feedback, setFeedback] = useState('');

  // Sample vocabulary data
  const words = [
    {
      id: 1,
      word: 'Beautiful',
      phonetic: '/ÀàbjuÀê.t…™.f…ôl/',
      meaning: 'ƒê·∫πp, xinh ƒë·∫πp',
      definition: 'Having qualities that give pleasure to the senses',
      acceptedAnswers: [
        'ƒë·∫πp',
        'xinh ƒë·∫πp',
        'ƒë·∫πp ƒë·∫Ω',
        'tuy·ªát ƒë·∫πp',
        'l·ªông l·∫´y',
        'quy·∫øn r≈©',
        'h·∫•p d·∫´n'
      ],
      hint: 'T·ª´ n√†y m√¥ t·∫£ v·ªÅ v·∫ª ngo√†i h·∫•p d·∫´n, th∆∞·ªùng d√πng ƒë·ªÉ khen ng·ª£i',
      example: 'She has a beautiful smile.',
      exampleTranslation: 'C√¥ ·∫•y c√≥ n·ª• c∆∞·ªùi ƒë·∫πp.',
      image: 'üå∏'
    },
    {
      id: 2,
      word: 'Adventure',
      phonetic: '/…ôdÀàven.t É…ôr/',
      meaning: 'Cu·ªôc phi√™u l∆∞u',
      definition: 'An exciting or dangerous experience',
      acceptedAnswers: [
        'cu·ªôc phi√™u l∆∞u',
        'phi√™u l∆∞u',
        'm·∫°o hi·ªÉm',
        'cu·ªôc m·∫°o hi·ªÉm',
        'h√†nh tr√¨nh th√∫ v·ªã',
        'tr·∫£i nghi·ªám th√∫ v·ªã'
      ],
      hint: 'T·ª´ n√†y ch·ªâ m·ªôt tr·∫£i nghi·ªám th√∫ v·ªã v√† ƒë·∫ßy m·∫°o hi·ªÉm',
      example: 'Their trip to the mountains was a great adventure.',
      exampleTranslation: 'Chuy·∫øn ƒëi l√™n n√∫i c·ªßa h·ªç l√† m·ªôt cu·ªôc phi√™u l∆∞u tuy·ªát v·ªùi.',
      image: 'üèîÔ∏è'
    },
    {
      id: 3,
      word: 'Knowledge',
      phonetic: '/Ààn…íl.…™d í/',
      meaning: 'Ki·∫øn th·ª©c',
      definition: 'Information and skills acquired through experience or education',
      acceptedAnswers: [
        'ki·∫øn th·ª©c',
        'tri th·ª©c',
        'h·ªçc th·ª©c',
        'hi·ªÉu bi·∫øt',
        's·ª± hi·ªÉu bi·∫øt',
        'tr√¨nh ƒë·ªô'
      ],
      hint: 'T·ª´ n√†y ch·ªâ nh·ªØng g√¨ b·∫°n h·ªçc ƒë∆∞·ª£c v√† hi·ªÉu bi·∫øt qua h·ªçc t·∫≠p',
      example: 'Reading books increases your knowledge.',
      exampleTranslation: 'ƒê·ªçc s√°ch l√†m tƒÉng ki·∫øn th·ª©c c·ªßa b·∫°n.',
      image: 'üìö'
    },
    {
      id: 4,
      word: 'Friendship',
      phonetic: '/Ààfrend. É…™p/',
      meaning: 'T√¨nh b·∫°n',
      definition: 'A close relationship between friends',
      acceptedAnswers: [
        't√¨nh b·∫°n',
        't√¨nh b·∫°n b√®',
        't√¨nh c·∫£m b·∫°n b√®',
        'm·ªëi quan h·ªá b·∫°n b√®',
        'b·∫°n b√®'
      ],
      hint: 'T·ª´ n√†y ch·ªâ m·ªëi quan h·ªá th√¢n thi·∫øt gi·ªØa nh·ªØng ng∆∞·ªùi b·∫°n',
      example: 'Their friendship has lasted for many years.',
      exampleTranslation: 'T√¨nh b·∫°n c·ªßa h·ªç ƒë√£ k√©o d√†i nhi·ªÅu nƒÉm.',
      image: 'ü§ù'
    }
  ];

  const currentWord = words[currentIndex];
  const progress = ((currentIndex + 1) / words.length) * 100;

  const checkAnswer = () => {
    const normalizedInput = userInput.toLowerCase().trim()
      .normalize('NFD').replace(/[\u0300-\u036f]/g, ''); // Remove Vietnamese accents for comparison
    
    const isCorrect = currentWord.acceptedAnswers.some(answer => {
      const normalizedAnswer = answer.toLowerCase()
        .normalize('NFD').replace(/[\u0300-\u036f]/g, '');
      return normalizedInput.includes(normalizedAnswer) || 
             normalizedAnswer.includes(normalizedInput);
    });

    if (isCorrect) {
      setScore(prev => ({ ...prev, correct: prev.correct + 1 }));
      setFeedback('correct');
      message.success('Ch√≠nh x√°c! B·∫°n ƒë√£ d·ªãch ƒë√∫ng t·ª´ n√†y.');
    } else {
      setScore(prev => ({ ...prev, incorrect: prev.incorrect + 1 }));
      setFeedback('incorrect');
      message.error('Ch∆∞a ch√≠nh x√°c. H√£y xem ƒë√°p √°n ƒë√∫ng b√™n d∆∞·ªõi.');
    }
    
    setShowAnswer(true);
  };

  const nextWord = () => {
    if (currentIndex < words.length - 1) {
      setCurrentIndex(currentIndex + 1);
      setUserInput('');
      setShowAnswer(false);
      setFeedback('');
    } else {
      setShowResult(true);
    }
  };

  const resetQuiz = () => {
    setCurrentIndex(0);
    setUserInput('');
    setShowAnswer(false);
    setScore({ correct: 0, incorrect: 0 });
    setShowResult(false);
    setFeedback('');
  };

  const playPronunciation = () => {
    message.info(`Ph√°t √¢m: ${currentWord.phonetic}`);
  };

  if (showResult) {
    const totalQuestions = words.length;
    const correctPercentage = Math.round((score.correct / totalQuestions) * 100);
    
    return (
      <div style={{ textAlign: 'center', padding: '40px 20px' }}>
        <Title level={2}>üéâ Ho√†n th√†nh!</Title>
        
        <div style={{ 
          maxWidth: '400px', 
          margin: '0 auto',
          padding: '24px',
          backgroundColor: '#f0f8ff',
          borderRadius: '12px',
          marginBottom: '24px'
        }}>
          <Title level={3}>K·∫øt qu·∫£ c·ªßa b·∫°n</Title>
          <div style={{ fontSize: '18px', marginBottom: '16px' }}>
            <div>‚úÖ ƒê√∫ng: <strong>{score.correct}/{totalQuestions}</strong></div>
            <div>‚ùå Sai: <strong>{score.incorrect}/{totalQuestions}</strong></div>
            <div style={{ marginTop: '8px' }}>
              ƒêi·ªÉm s·ªë: <strong>{correctPercentage}%</strong>
            </div>
          </div>
          
          <Progress 
            percent={correctPercentage} 
            strokeColor={correctPercentage >= 70 ? '#52c41a' : '#fa8c16'}
          />
          
          <div style={{ marginTop: '16px' }}>
            {correctPercentage >= 70 ? (
              <Tag color="green" style={{ fontSize: '14px', padding: '4px 8px' }}>
                üåü Xu·∫•t s·∫Øc!
              </Tag>
            ) : (
              <Tag color="orange" style={{ fontSize: '14px', padding: '4px 8px' }}>
                üí™ C·∫ßn luy·ªán t·∫≠p th√™m
              </Tag>
            )}
          </div>
        </div>

        <Space size="large">
          <Button 
            type="primary" 
            icon={<ReloadOutlined />} 
            onClick={resetQuiz}
            size="large"
          >
            H·ªçc l·∫°i
          </Button>
          <Button 
            icon={<ArrowLeftOutlined />} 
            onClick={onBack}
            size="large"
          >
            Quay l·∫°i
          </Button>
        </Space>
      </div>
    );
  }

  return (
    <div>
      <div style={{ marginBottom: '24px' }}>
        <Button 
          icon={<ArrowLeftOutlined />} 
          onClick={onBack}
          style={{ marginBottom: '16px' }}
        >
          Quay l·∫°i ph∆∞∆°ng ph√°p h·ªçc
        </Button>
        
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Title level={2}>üáªüá≥ Nh·∫≠p nghƒ©a ti·∫øng Vi·ªát - {vocabulary.title}</Title>
          <div style={{ fontSize: '16px' }}>
            <span>{currentIndex + 1}/{words.length}</span>
          </div>
        </div>
        
        <Progress percent={progress} strokeColor="#fa8c16" />
        
        <div style={{ marginTop: '8px', fontSize: '14px', color: '#666' }}>
          ‚úÖ ƒê√∫ng: {score.correct} | ‚ùå Sai: {score.incorrect}
        </div>
      </div>

      <div style={{ maxWidth: '800px', margin: '0 auto' }}>
        {/* Word Card */}
        <Card style={{ marginBottom: '24px' }}>
          <div style={{ textAlign: 'center', marginBottom: '24px' }}>
            <div style={{ fontSize: '48px', marginBottom: '16px' }}>
              {currentWord.image}
            </div>
            <Title level={1} style={{ marginBottom: '8px', color: '#1890ff' }}>
              {currentWord.word}
            </Title>
            <div style={{ fontSize: '18px', color: '#666', marginBottom: '16px' }}>
              {currentWord.phonetic}
            </div>
            <Button 
              icon={<SoundOutlined />} 
              onClick={playPronunciation}
            >
              Ph√°t √¢m
            </Button>
          </div>

          <div style={{ 
            backgroundColor: '#f0f8ff', 
            padding: '16px', 
            borderRadius: '8px',
            marginBottom: '16px'
          }}>
            <Title level={5} style={{ marginBottom: '8px' }}>ƒê·ªãnh nghƒ©a ti·∫øng Anh:</Title>
            <Paragraph style={{ fontSize: '16px', margin: 0 }}>
              {currentWord.definition}
            </Paragraph>
          </div>

          {/* Hint */}
          <Alert
            message="G·ª£i √Ω"
            description={currentWord.hint}
            type="info"
            icon={<BulbOutlined />}
            style={{ marginBottom: '20px' }}
          />
        </Card>

        {/* Input Area */}
        <Card title="Nh·∫≠p nghƒ©a ti·∫øng Vi·ªát c·ªßa t·ª´ n√†y">
          <Input
            value={userInput}
            onChange={(e) => setUserInput(e.target.value)}
            placeholder="Nh·∫≠p nghƒ©a ti·∫øng Vi·ªát..."
            size="large"
            style={{ marginBottom: '16px' }}
            disabled={showAnswer}
            onPressEnter={!showAnswer ? checkAnswer : undefined}
          />
          
          {!showAnswer ? (
            <Button 
              type="primary" 
              onClick={checkAnswer}
              disabled={!userInput.trim()}
              icon={<CheckOutlined />}
              size="large"
            >
              Ki·ªÉm tra ƒë√°p √°n
            </Button>
          ) : (
            <Button 
              type="primary" 
              onClick={nextWord}
              size="large"
            >
              {currentIndex < words.length - 1 ? 'T·ª´ ti·∫øp theo' : 'Ho√†n th√†nh'}
            </Button>
          )}
        </Card>

        {/* Answer Feedback */}
        {showAnswer && (
          <Card 
            style={{ 
              marginTop: '24px',
              borderColor: feedback === 'correct' ? '#52c41a' : '#ff4d4f'
            }}
          >
            <div style={{ marginBottom: '16px' }}>
              {feedback === 'correct' ? (
                <Alert
                  message="Ch√≠nh x√°c! üéâ"
                  description="B·∫°n ƒë√£ d·ªãch ƒë√∫ng t·ª´ n√†y sang ti·∫øng Vi·ªát."
                  type="success"
                  showIcon
                />
              ) : (
                <Alert
                  message="Ch∆∞a ch√≠nh x√°c üìù"
                  description="ƒê·ª´ng lo l·∫Øng, h√£y xem ƒë√°p √°n ƒë√∫ng ƒë·ªÉ h·ªçc th√™m."
                  type="error"
                  showIcon
                />
              )}
            </div>

            <div style={{ marginBottom: '16px' }}>
              <Title level={5}>Nghƒ©a ch√≠nh x√°c:</Title>
              <Paragraph style={{ 
                fontSize: '18px', 
                backgroundColor: '#f0f8ff', 
                padding: '12px',
                borderRadius: '6px',
                fontWeight: 'bold',
                color: '#1890ff'
              }}>
                {currentWord.meaning}
              </Paragraph>
            </div>

            <div style={{ marginBottom: '16px' }}>
              <Title level={5}>V√≠ d·ª•:</Title>
              <div style={{ 
                backgroundColor: '#f6ffed',
                padding: '12px',
                borderRadius: '6px'
              }}>
                <Paragraph style={{ margin: 0, marginBottom: '4px' }}>
                  <strong>English:</strong> {currentWord.example}
                </Paragraph>
                <Paragraph style={{ margin: 0, color: '#666' }}>
                  <strong>Ti·∫øng Vi·ªát:</strong> {currentWord.exampleTranslation}
                </Paragraph>
              </div>
            </div>

            {feedback === 'incorrect' && (
              <div>
                <Title level={5}>C√°c ƒë√°p √°n ƒë∆∞·ª£c ch·∫•p nh·∫≠n:</Title>
                <div>
                  {currentWord.acceptedAnswers.map((answer, index) => (
                    <Tag 
                      key={index} 
                      color="blue"
                      style={{ 
                        marginBottom: '4px', 
                        fontSize: '14px',
                        padding: '4px 8px'
                      }}
                    >
                      {answer}
                    </Tag>
                  ))}
                </div>
              </div>
            )}
          </Card>
        )}
      </div>
    </div>
  );
};

export default VietnameseInputLearning;
