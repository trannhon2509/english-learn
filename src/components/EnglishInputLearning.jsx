import React, { useState } from 'react';
import { Card, Button, Input, Typography, Space, Progress, Tag, message, Alert } from 'antd';
import { 
  ArrowLeftOutlined, 
  SoundOutlined, 
  CheckOutlined,
  ReloadOutlined,
  BulbOutlined
} from '@ant-design/icons';

const { Title, Paragraph } = Typography;
const { TextArea } = Input;

const EnglishInputLearning = ({ vocabulary, onBack }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [userInput, setUserInput] = useState('');
  const [showAnswer, setShowAnswer] = useState(false);
  const [score, setScore] = useState({ correct: 0, incorrect: 0 });
  const [showResult, setShowResult] = useState(false);
  const [feedback, setFeedback] = useState('');

  // Sample vocabulary data
  const words = [
    {
      id: 1,
      word: 'Beautiful',
      phonetic: '/ÀàbjuÀê.t…™.f…ôl/',
      meaning: 'ƒê·∫πp, xinh ƒë·∫πp',
      definition: 'Having qualities that give pleasure to the senses',
      acceptedAnswers: [
        'having qualities that give pleasure to the senses',
        'pleasing to look at',
        'attractive',
        'good looking',
        'pretty'
      ],
      hint: 'T·ª´ n√†y m√¥ t·∫£ v·ªÅ v·∫ª ngo√†i h·∫•p d·∫´n',
      example: 'She has a beautiful smile.',
      image: 'üå∏'
    },
    {
      id: 2,
      word: 'Adventure',
      phonetic: '/…ôdÀàven.t É…ôr/',
      meaning: 'Cu·ªôc phi√™u l∆∞u',
      definition: 'An exciting or dangerous experience',
      acceptedAnswers: [
        'an exciting or dangerous experience',
        'exciting experience',
        'dangerous experience',
        'thrilling journey',
        'exciting journey'
      ],
      hint: 'T·ª´ n√†y li√™n quan ƒë·∫øn tr·∫£i nghi·ªám th√∫ v·ªã v√† m·∫°o hi·ªÉm',
      example: 'Their trip to the mountains was a great adventure.',
      image: 'üèîÔ∏è'
    },
    {
      id: 3,
      word: 'Knowledge',
      phonetic: '/Ààn…íl.…™d í/',
      meaning: 'Ki·∫øn th·ª©c',
      definition: 'Information and skills acquired through experience or education',
      acceptedAnswers: [
        'information and skills acquired through experience or education',
        'information gained through learning',
        'understanding gained through learning',
        'learning and understanding',
        'facts and skills'
      ],
      hint: 'T·ª´ n√†y ch·ªâ nh·ªØng g√¨ b·∫°n h·ªçc ƒë∆∞·ª£c v√† hi·ªÉu bi·∫øt',
      example: 'Reading books increases your knowledge.',
      image: 'üìö'
    }
  ];

  const currentWord = words[currentIndex];
  const progress = ((currentIndex + 1) / words.length) * 100;

  const checkAnswer = () => {
    const normalizedInput = userInput.toLowerCase().trim();
    const isCorrect = currentWord.acceptedAnswers.some(answer => 
      normalizedInput.includes(answer.toLowerCase()) || 
      answer.toLowerCase().includes(normalizedInput)
    );

    if (isCorrect) {
      setScore(prev => ({ ...prev, correct: prev.correct + 1 }));
      setFeedback('correct');
      message.success('Ch√≠nh x√°c! B·∫°n ƒë√£ hi·ªÉu ƒë√∫ng nghƒ©a c·ªßa t·ª´ n√†y.');
    } else {
      setScore(prev => ({ ...prev, incorrect: prev.incorrect + 1 }));
      setFeedback('incorrect');
      message.error('Ch∆∞a ch√≠nh x√°c. H√£y xem ƒë√°p √°n ƒë√∫ng b√™n d∆∞·ªõi.');
    }
    
    setShowAnswer(true);
  };

  const nextWord = () => {
    if (currentIndex < words.length - 1) {
      setCurrentIndex(currentIndex + 1);
      setUserInput('');
      setShowAnswer(false);
      setFeedback('');
    } else {
      setShowResult(true);
    }
  };

  const resetQuiz = () => {
    setCurrentIndex(0);
    setUserInput('');
    setShowAnswer(false);
    setScore({ correct: 0, incorrect: 0 });
    setShowResult(false);
    setFeedback('');
  };

  const playPronunciation = () => {
    message.info(`Ph√°t √¢m: ${currentWord.phonetic}`);
  };

  if (showResult) {
    const totalQuestions = words.length;
    const correctPercentage = Math.round((score.correct / totalQuestions) * 100);
    
    return (
      <div style={{ textAlign: 'center', padding: '40px 20px' }}>
        <Title level={2}>üéâ Ho√†n th√†nh!</Title>
        
        <div style={{ 
          maxWidth: '400px', 
          margin: '0 auto',
          padding: '24px',
          backgroundColor: '#f0f8ff',
          borderRadius: '12px',
          marginBottom: '24px'
        }}>
          <Title level={3}>K·∫øt qu·∫£ c·ªßa b·∫°n</Title>
          <div style={{ fontSize: '18px', marginBottom: '16px' }}>
            <div>‚úÖ ƒê√∫ng: <strong>{score.correct}/{totalQuestions}</strong></div>
            <div>‚ùå Sai: <strong>{score.incorrect}/{totalQuestions}</strong></div>
            <div style={{ marginTop: '8px' }}>
              ƒêi·ªÉm s·ªë: <strong>{correctPercentage}%</strong>
            </div>
          </div>
          
          <Progress 
            percent={correctPercentage} 
            strokeColor={correctPercentage >= 70 ? '#52c41a' : '#fa8c16'}
          />
          
          <div style={{ marginTop: '16px' }}>
            {correctPercentage >= 70 ? (
              <Tag color="green" style={{ fontSize: '14px', padding: '4px 8px' }}>
                üåü Xu·∫•t s·∫Øc!
              </Tag>
            ) : (
              <Tag color="orange" style={{ fontSize: '14px', padding: '4px 8px' }}>
                üí™ C·∫ßn luy·ªán t·∫≠p th√™m
              </Tag>
            )}
          </div>
        </div>

        <Space size="large">
          <Button 
            type="primary" 
            icon={<ReloadOutlined />} 
            onClick={resetQuiz}
            size="large"
          >
            H·ªçc l·∫°i
          </Button>
          <Button 
            icon={<ArrowLeftOutlined />} 
            onClick={onBack}
            size="large"
          >
            Quay l·∫°i
          </Button>
        </Space>
      </div>
    );
  }

  return (
    <div>
      <div style={{ marginBottom: '24px' }}>
        <Button 
          icon={<ArrowLeftOutlined />} 
          onClick={onBack}
          style={{ marginBottom: '16px' }}
        >
          Quay l·∫°i ph∆∞∆°ng ph√°p h·ªçc
        </Button>
        
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Title level={2}>‚úçÔ∏è Nh·∫≠p nghƒ©a ti·∫øng Anh - {vocabulary.title}</Title>
          <div style={{ fontSize: '16px' }}>
            <span>{currentIndex + 1}/{words.length}</span>
          </div>
        </div>
        
        <Progress percent={progress} strokeColor="#52c41a" />
        
        <div style={{ marginTop: '8px', fontSize: '14px', color: '#666' }}>
          ‚úÖ ƒê√∫ng: {score.correct} | ‚ùå Sai: {score.incorrect}
        </div>
      </div>

      <div style={{ maxWidth: '800px', margin: '0 auto' }}>
        {/* Word Card */}
        <Card style={{ marginBottom: '24px' }}>
          <div style={{ textAlign: 'center', marginBottom: '24px' }}>
            <div style={{ fontSize: '48px', marginBottom: '16px' }}>
              {currentWord.image}
            </div>
            <Title level={1} style={{ marginBottom: '8px', color: '#1890ff' }}>
              {currentWord.word}
            </Title>
            <div style={{ fontSize: '18px', color: '#666', marginBottom: '16px' }}>
              {currentWord.phonetic}
            </div>
            <Button 
              icon={<SoundOutlined />} 
              onClick={playPronunciation}
            >
              Ph√°t √¢m
            </Button>
          </div>

          <div style={{ textAlign: 'center', marginBottom: '16px' }}>
            <Title level={4}>Nghƒ©a ti·∫øng Vi·ªát: {currentWord.meaning}</Title>
          </div>

          {/* Hint */}
          <Alert
            message="G·ª£i √Ω"
            description={currentWord.hint}
            type="info"
            icon={<BulbOutlined />}
            style={{ marginBottom: '20px' }}
          />
        </Card>

        {/* Input Area */}
        <Card title="Nh·∫≠p ƒë·ªãnh nghƒ©a ti·∫øng Anh c·ªßa t·ª´ n√†y">
          <TextArea
            value={userInput}
            onChange={(e) => setUserInput(e.target.value)}
            placeholder="Nh·∫≠p ƒë·ªãnh nghƒ©a ti·∫øng Anh c·ªßa t·ª´ n√†y..."
            rows={4}
            style={{ marginBottom: '16px' }}
            disabled={showAnswer}
          />
          
          {!showAnswer ? (
            <Button 
              type="primary" 
              onClick={checkAnswer}
              disabled={!userInput.trim()}
              icon={<CheckOutlined />}
              size="large"
            >
              Ki·ªÉm tra ƒë√°p √°n
            </Button>
          ) : (
            <Button 
              type="primary" 
              onClick={nextWord}
              size="large"
            >
              {currentIndex < words.length - 1 ? 'T·ª´ ti·∫øp theo' : 'Ho√†n th√†nh'}
            </Button>
          )}
        </Card>

        {/* Answer Feedback */}
        {showAnswer && (
          <Card 
            style={{ 
              marginTop: '24px',
              borderColor: feedback === 'correct' ? '#52c41a' : '#ff4d4f'
            }}
          >
            <div style={{ marginBottom: '16px' }}>
              {feedback === 'correct' ? (
                <Alert
                  message="Ch√≠nh x√°c! üéâ"
                  description="B·∫°n ƒë√£ hi·ªÉu ƒë√∫ng nghƒ©a c·ªßa t·ª´ n√†y."
                  type="success"
                  showIcon
                />
              ) : (
                <Alert
                  message="Ch∆∞a ch√≠nh x√°c üìù"
                  description="ƒê·ª´ng lo l·∫Øng, h√£y xem ƒë√°p √°n ƒë√∫ng b√™n d∆∞·ªõi ƒë·ªÉ h·ªçc th√™m."
                  type="error"
                  showIcon
                />
              )}
            </div>

            <div style={{ marginBottom: '16px' }}>
              <Title level={5}>ƒê·ªãnh nghƒ©a ch√≠nh x√°c:</Title>
              <Paragraph style={{ 
                fontSize: '16px', 
                backgroundColor: '#f0f8ff', 
                padding: '12px',
                borderRadius: '6px'
              }}>
                {currentWord.definition}
              </Paragraph>
            </div>

            <div style={{ marginBottom: '16px' }}>
              <Title level={5}>V√≠ d·ª•:</Title>
              <Paragraph style={{ 
                fontSize: '14px',
                backgroundColor: '#f6ffed',
                padding: '12px',
                borderRadius: '6px'
              }}>
                {currentWord.example}
              </Paragraph>
            </div>

            {feedback === 'incorrect' && (
              <div>
                <Title level={5}>C√°c ƒë√°p √°n ƒë∆∞·ª£c ch·∫•p nh·∫≠n:</Title>
                <div>
                  {currentWord.acceptedAnswers.map((answer, index) => (
                    <Tag key={index} style={{ marginBottom: '4px', fontSize: '12px' }}>
                      {answer}
                    </Tag>
                  ))}
                </div>
              </div>
            )}
          </Card>
        )}
      </div>
    </div>
  );
};

export default EnglishInputLearning;
